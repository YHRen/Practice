#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <unordered_map>
#include <limits>
#include <iostream> 
#include <iomanip>  
#include <string>
#include <sstream>  
#include <algorithm>
#include <numeric>
#include <functional>
#include <cstring>
#include <cmath>
#include <cassert>


#define INF                         (int)1000000007
#define EPS                         1e-9

#define bg     begin()
#define pb     push_back
#define mp     make_pair

#define all(c)                      c.begin(), c.end()
#define forall(i,a,b)               for(int i=a;i<b;i++)
#define in(a,b)                     ( (b).find(a) != (b).end())
#define input( a )                  for( auto & x : a ) cin >> x;

using namespace std;

typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector<vi>  vvi;
typedef vector<ii>  vii;

#ifdef DEBUG
#define debug(args...)            {dbg,args; clog<<endl;}
#define print_( a )               for( auto & x : a ) clog << x << ' '; clog << '\n';
#define printPair_( a )           for( auto & x : a ) clog << '(' << x.first << ',' << x.second << ')' << ' '; clog << '\n';
#else
#define debug(args...)             // Just strip off all debug tokens
#define print_( a )               // skip
#define printPair_( a )           // skip
#endif
struct debugger
{
  template<typename T> debugger& operator , (const T& x)
  {    
    clog << x << " ";    
    return *this;    
  }
} dbg;

// std::ios::sync_with_stdio(false);
// std::cin.tie(NULL);
/******* Actual Code Starts Here *********/
class Solution {
public:
  int attack( const vvi & g, vi & ini, int r ){
    int n = g.size();
    //for( int i = 0; i < n; ++i ) if (g[r][i] == 1){
    //  g[i][r] = 0; g[r][i] = 0;
    //}

    vi u(n,0);
    queue<int> Q;
    for(auto x : ini){
      if (x != r){
        Q.push(x);
        u[x] = 1;
      }
    }

    int cnt = 0;
    while( !Q.empty() ){
      int x = Q.front(); Q.pop();
      ++cnt;
      for( int i = 0; i < n; ++i ) if( g[x][i] == 1 && u[i] == 0 ){
        u[i] = 1;
        Q.push(i);
      }
    }
    return cnt;
  }

    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
      sort(all(initial));
      int smallest_attack = 301;
      int ans = initial[0];
      for(auto x : initial){
        int res = attack(graph, initial, x );
        if( res < smallest_attack ){
          smallest_attack = res;
          ans = x;
        }
        debug(x, res);
      }
      return ans;
    }
};

int main( int argc, char * argv[] ){
  int n,m; cin >> n >> m;
  vvi g(n); 
  for( auto & v : g ){
    v.resize(n);
    input(v);
  }
  vi ini(m);
  input(ini);
  print_(ini);


  Solution sol;
  cout << sol.minMalwareSpread(g, ini) << '\n';




  return 0;
}
