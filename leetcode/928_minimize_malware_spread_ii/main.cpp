#include <vector>
#include <set>
#include <map>
#include <queue>
#include <stack>
#include <unordered_map>
#include <limits>
#include <iostream> 
#include <iomanip>  
#include <string>
#include <sstream>  
#include <algorithm>
#include <numeric>
#include <functional>
#include <cstring>
#include <cmath>
#include <cassert>


#define INF                         (int)1000000007
#define EPS                         1e-9

#define bg     begin()
#define pb     push_back
#define mp     make_pair

#define all(c)                      c.begin(), c.end()
#define forall(i,a,b)               for(int i=a;i<b;i++)
#define in(a,b)                     ( (b).find(a) != (b).end())
#define input( a )                  for( auto & x : a ) cin >> x;

using namespace std;

typedef vector<int> vi;
typedef pair<int,int> ii;
typedef vector<vi>  vvi;
typedef vector<ii>  vii;

#ifdef DEBUG
#define debug(args...)            {dbg,args; clog<<endl;}
#define print_( a )               for( auto & x : a ) clog << x << ' '; clog << '\n';
#define printPair_( a )           for( auto & x : a ) clog << '(' << x.first << ',' << x.second << ')' << ' '; clog << '\n';
#else
#define debug(args...)             // Just strip off all debug tokens
#define print_( a )               // skip
#define printPair_( a )           // skip
#endif
struct debugger
{
  template<typename T> debugger& operator , (const T& x)
  {    
    clog << x << " ";    
    return *this;    
  }
} dbg;

// std::ios::sync_with_stdio(false);
// std::cin.tie(NULL);
/******* Actual Code Starts Here *********/

class Solution {
    vvi remove_node( const vvi & g, int v ){
      int n = g.size();
      vvi h = g;
      forall(i,0,n) h[v][i] = 0;
      forall(i,0,n) h[i][v] = 0;
      return h;
    }

    int count( const vvi & g, const vi & init, int v ){
      int n = g.size();
      int cnt = 0;
      vi visited(n, 0);
      queue<int> Q;
      for(auto x : init ){
        if( x != v ){
          Q.push(x);
          visited[x] = 1;
        }
      }
      while( !Q.empty() ){
        int u = Q.front(); Q.pop();
        ++cnt;
        forall(i,0,n){
          if( g[u][i] == 1 && !visited[i] ){
            visited[i] = 1;
            Q.push(i);
          }
        }
      }
      return cnt;
    }
  public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
      sort(all(initial));
      int n = graph.size();
      int smallest    = INF;
      int smallest_id = 0;
      for( auto v: initial ){
        auto h = remove_node(graph, v);
        for(auto w: h){
          print_(w);
        }
        auto p = count(h, initial, v);
        debug("v", v, "removed,", p, "affected");
        if( p < smallest ){
          smallest= p;
          smallest_id = v;
        }
      }
      return smallest_id;
    }
};

int main( int argc, char * argv[] ){
  int n,m; cin >> n >> m;
  vvi g(n);
  for(auto & v : g) v.resize(n);
  for(auto & v : g) input(v);
  vi  l(m);         input(l);
  Solution sol;
  cout << sol.minMalwareSpread(g,l) << '\n';
  return 0;
}
